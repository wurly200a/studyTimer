/*
    MIT License

    Copyright (c) 2018-2020, Alexey Dynda

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
*/
#include "lcdgfx.h"
#include "lcdgfx_gui.h"
#include "sova.h"
#include "lcd_lib.hpp"

const PROGMEM uint8_t heartImage8[ 8 * 8 ] =
{
    0x00, 0xE0, 0xE0, 0x00, 0x00, 0xE5, 0xE5, 0x00,
    0xE0, 0xC0, 0xE0, 0xE0, 0xE0, 0xEC, 0xEC, 0xE5,
    0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE5, 0xEC, 0xE5,
    0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE5, 0xE0,
    0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0x00,
    0x00, 0x00, 0x80, 0xE0, 0xE0, 0xE0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x80, 0xE0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const PROGMEM uint8_t blackImage8[ 8 * 8 ] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

static const uint8_t image_data_32x24_16bit[1536] = {
    // ∙∙∙∙∙∙░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░∙∙∙∙∙∙
    // ∙∙∙∙∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙∙∙∙
    // ∙∙∙∙▒▒▒▒▒░▒▒░▒▒░▒▒▒▒▒▒▒▒▒▒▒▒∙∙∙∙
    // ∙∙∙▒▒▒▒▒▒░▒▒░▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙∙
    // ∙∙░▒▒▒▒▒▒▒░▒░▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒░∙∙
    // ∙∙▒▒▒▒▒░░▒░▒░▒▒∙▒░░▒▒▒░░░▒░░░░∙∙
    // ∙░▒▒▒▒∙▓██████▓▒▒▒▒∙▒∙░░░░░█▒▓∙∙
    // ∙▒▒░▒█▒∙▒▒▒▒▒▒▓████∙▒▒░█░▒░█∙▒▒∙
    // ∙▒▒░█∙█∙███████████∙▒░▓█∙░░▓░░▓∙
    // ░▒░█▒∙█∙░██▓▓██░███∙░░█▒░░∙▓░░░░
    // ░▒░█▒∙█∙∙█████████▓∙░██░░█▓▒░░▒░
    // ▒░∙▒▒░░∙∙█████████▒∙█▓∙▒░█▓∙▒▒▒▒
    // ░▓█▓▓█░∙∙████▒░███∙∙▒░▒░░∙░▒▒▒▒▒
    // ▒█∙▓∙∙▒∙░█████▒███∙∙▒▒░▒▒▒▒▒▒▒▒▒
    // ░░∙█░░▒∙▒█████▒██▓∙∙▒▒▒▒▒▒▒▒▒▒▒▒
    // ▒▒░▓∙░▒∙▓████▒▒██▒∙░▒▒▒▒▒▒▒▒▒▒▒▒
    // ░▒▒░▒▒░∙█████████∙∙▒▒▒▒▒▒▒▒▒▒▒▒░
    // ∙▒▒▒░░∙▓█████████∙░▒▒▒▒▒▒▒▒▒▒▒▒∙
    // ∙▒▒▒▒▒∙█████████∙░▒▒▒▒▒▒▒▒▒▒▒▒▒∙
    // ∙░▒▒▒▒░░▓█████▓∙░▒▒▒▒▒▒▒▒▒▒▒▒▒░∙
    // ∙∙▒▒▒▒▒▒∙▒∙░∙▒∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙
    // ∙∙░▒▒▒▒░█░▒▒░▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▒░∙∙
    // ∙∙∙▒▒▒▒░░░▒▒░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙∙
    // ∙∙∙∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙∙∙
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xc9, 0x26, 0x0a, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x26, 0x0a, 0x2c, 0xa9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x2d, 0xca, 0x25, 0xc9, 0x25, 0x89, 0x25, 0x89, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0xc9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xc9, 0x2d, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xeb, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0xa9, 0x1c, 0x88, 0x25, 0x29, 0x1d, 0x28, 0x1c, 0x27, 0x25, 0xa9, 0x25, 0xc9, 0x12, 0xa5, 0x25, 0xc9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xa9, 0x2d, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x29, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xc9, 0x12, 0xc5, 0x26, 0x0a, 0x25, 0x69, 0x13, 0x25, 0x25, 0xc9, 0x25, 0x69, 0x13, 0x05, 0x25, 0xc9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xc9, 0x2d, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x23, 0x06, 0x25, 0xea, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xa9, 0x1d, 0xc9, 0x1d, 0xc9, 0x0b, 0x45, 0x1e, 0x29, 0x0a, 0xe4, 0x15, 0xe9, 0x1e, 0x09, 0x12, 0xc4, 0x1e, 0x09, 0x1d, 0xc9, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xc9, 0x25, 0xc9, 0x25, 0xa9, 0x25, 0x89, 0x25, 0xa9, 0x1d, 0xaa, 0x1e, 0x2a, 0x23, 0x06, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x08, 0x20, 0x2e, 0x4b, 0x25, 0x89, 0x25, 0x89, 0x1d, 0xa9, 0x26, 0x0a, 0x0b, 0xe5, 0x2b, 0x27, 0x63, 0xcd, 0x42, 0x28, 0x8c, 0x71, 0x41, 0xe8, 0x84, 0x50, 0x74, 0x2f, 0x10, 0xc2, 0x53, 0xcb, 0x2b, 0x48, 0x1b, 0x66, 0x25, 0xa9, 0x25, 0x89, 0x26, 0x0a, 0x13, 0x45, 0x13, 0x05, 0x1c, 0x07, 0x26, 0x0a, 0x1c, 0xc8, 0x3b, 0x23, 0x43, 0x43, 0x0c, 0xea, 0x00, 0x20, 0x00, 0x00, 
    0x00, 0x00, 0x23, 0xc7, 0x25, 0xc9, 0x25, 0x89, 0x15, 0x68, 0x3c, 0x4a, 0x00, 0xa1, 0xbd, 0x56, 0xff, 0xff, 0xf7, 0x9e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa5, 0x14, 0x9c, 0xb3, 0x8c, 0x31, 0x9c, 0xb3, 0xa4, 0x73, 0x02, 0x63, 0x26, 0x2a, 0x12, 0x44, 0x14, 0x47, 0x33, 0x46, 0x1c, 0xc8, 0x13, 0x05, 0x02, 0xe6, 0xff, 0xa0, 0x83, 0x80, 0xde, 0x20, 0x02, 0x26, 0x00, 0x00, 
    0x00, 0x00, 0x2e, 0x4b, 0x25, 0x89, 0x0d, 0x47, 0x7c, 0x0f, 0xde, 0x7a, 0x94, 0x92, 0x00, 0x00, 0x84, 0x10, 0x6b, 0x6d, 0x7b, 0xef, 0x6b, 0x6d, 0x73, 0xae, 0x8c, 0x71, 0xb5, 0xb6, 0xe7, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x00, 0x00, 0x26, 0x2a, 0x1d, 0xc9, 0x32, 0xa6, 0xff, 0xf6, 0x03, 0x25, 0x26, 0x6a, 0x03, 0x67, 0xff, 0x80, 0x01, 0xc5, 0x8c, 0x40, 0x84, 0x62, 0x00, 0x00, 
    0x11, 0xc3, 0x25, 0xea, 0x1d, 0xe9, 0x4a, 0xea, 0xff, 0xff, 0x00, 0x00, 0xd6, 0xba, 0x00, 0x00, 0xde, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x1c, 0x00, 0x00, 0x26, 0x0a, 0x04, 0x46, 0xc5, 0x0d, 0xf6, 0x91, 0x01, 0xe3, 0x1b, 0xa6, 0x02, 0xe6, 0xdd, 0xe0, 0x03, 0xc8, 0x0a, 0xc5, 0xee, 0x80, 0x00, 0xe3, 
    0x23, 0x87, 0x25, 0xea, 0x03, 0x43, 0xff, 0xff, 0x8c, 0x51, 0x00, 0x00, 0xce, 0x79, 0x00, 0x00, 0x4a, 0x69, 0xff, 0xff, 0xff, 0xff, 0xad, 0x75, 0xc6, 0x38, 0xff, 0xff, 0xff, 0xff, 0x39, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xd6, 0xba, 0x00, 0x00, 0x0c, 0x47, 0x62, 0xc7, 0xff, 0xf5, 0x83, 0x69, 0x04, 0x47, 0x0a, 0xc5, 0x00, 0xa3, 0xfe, 0xe0, 0x03, 0xe8, 0x39, 0xe0, 0x5a, 0xa0, 0x1b, 0x87, 
    0x24, 0xa9, 0x1d, 0xe9, 0x2a, 0xe7, 0xff, 0xff, 0x84, 0x10, 0x00, 0x00, 0xce, 0x79, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xad, 0x75, 0x00, 0x00, 0x6a, 0xc7, 0xff, 0xf5, 0xfe, 0xb1, 0x03, 0x05, 0x63, 0x00, 0xff, 0xe0, 0xd6, 0x00, 0xac, 0x60, 0x15, 0x29, 0x13, 0x26, 0x1d, 0xca, 0x24, 0xa8, 
    0x2d, 0xca, 0x04, 0xc7, 0x21, 0x84, 0x8b, 0xeb, 0x8b, 0xeb, 0x42, 0x04, 0x42, 0x28, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0xae, 0x00, 0x00, 0xff, 0x32, 0xf6, 0x30, 0x02, 0x44, 0x1e, 0x6b, 0x52, 0xa0, 0xff, 0xe0, 0xf6, 0xc0, 0x09, 0xa3, 0x25, 0xea, 0x25, 0xc9, 0x25, 0x89, 0x2d, 0x4a, 
    0x04, 0x06, 0xbc, 0xac, 0xff, 0xf4, 0xb4, 0xeb, 0xcd, 0xce, 0xff, 0xf3, 0x52, 0x44, 0x00, 0x00, 0x08, 0x61, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7d, 0x63, 0x2c, 0x5a, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x21, 0x24, 0x00, 0x00, 0x93, 0xaa, 0x0b, 0x25, 0x1d, 0xc9, 0x13, 0x05, 0x14, 0x68, 0x02, 0xa6, 0x03, 0x47, 0x25, 0xea, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xaa, 
    0x63, 0xc9, 0xff, 0xf5, 0x00, 0x00, 0x9c, 0xf4, 0x29, 0x87, 0x18, 0xc4, 0x8c, 0x71, 0x00, 0x00, 0x42, 0x08, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x5d, 0xce, 0x79, 0x8c, 0x71, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xc9, 0x25, 0xea, 0x1b, 0xa6, 0x25, 0xca, 0x25, 0xa9, 0x25, 0xc9, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 
    0x24, 0x68, 0x22, 0xc5, 0x02, 0xc3, 0xde, 0x9b, 0x39, 0xe7, 0x4a, 0x49, 0x7b, 0xef, 0x00, 0x00, 0x84, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x3c, 0x94, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xce, 0x59, 0x00, 0x00, 0x09, 0x42, 0x26, 0x0a, 0x25, 0x89, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x2d, 0x8a, 
    0x25, 0x09, 0x1d, 0xe9, 0x0c, 0x86, 0xcd, 0xd8, 0x00, 0x00, 0x5a, 0xcb, 0x7b, 0xcf, 0x00, 0x00, 0xce, 0x59, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7b, 0xcf, 0x94, 0x92, 0xff, 0xff, 0xff, 0xff, 0x7b, 0xef, 0x00, 0x00, 0x1c, 0x07, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x2c, 0xc9, 
    0x23, 0xc7, 0x25, 0xa9, 0x1d, 0xe9, 0x3a, 0x68, 0x9c, 0x93, 0x84, 0x10, 0x39, 0xc7, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x18, 0xc3, 0x00, 0x00, 0x26, 0x4a, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xa9, 0x23, 0xa7, 
    0x1a, 0x24, 0x25, 0xea, 0x25, 0x89, 0x1d, 0x88, 0x22, 0x86, 0x5a, 0x2a, 0x00, 0x00, 0xad, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x9e, 0x00, 0x00, 0x1c, 0x47, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xea, 0x12, 0x04, 
    0x08, 0x00, 0x26, 0x4a, 0x25, 0x89, 0x25, 0x89, 0x25, 0xe9, 0x1d, 0x68, 0x19, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x18, 0x42, 0x14, 0x06, 0x25, 0xea, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x2e, 0x4a, 0x00, 0x00, 
    0x00, 0x00, 0x24, 0x88, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0xa9, 0x15, 0x07, 0x3a, 0x27, 0xc5, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd6, 0x19, 0x21, 0x44, 0x14, 0x06, 0x25, 0xea, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xa9, 0x2c, 0x68, 0x00, 0x00, 
    0x00, 0x00, 0x10, 0xc2, 0x26, 0x4a, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x1e, 0x49, 0x29, 0xe3, 0x93, 0xe9, 0x00, 0x61, 0x12, 0x84, 0x00, 0x20, 0x83, 0x47, 0x02, 0x22, 0x1e, 0x2a, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x26, 0x4a, 0x08, 0xa2, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x2c, 0x28, 0x25, 0xc9, 0x25, 0x89, 0x25, 0x89, 0x25, 0xa9, 0x03, 0x65, 0xf6, 0x50, 0x62, 0xe7, 0x15, 0x48, 0x1e, 0x2a, 0x53, 0x07, 0xb4, 0x6c, 0x15, 0x08, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xc9, 0x23, 0xe7, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xea, 0x25, 0x89, 0x25, 0x89, 0x1d, 0xc9, 0x52, 0x05, 0x4a, 0x66, 0x15, 0x28, 0x25, 0xa9, 0x25, 0xc9, 0x32, 0x85, 0x0b, 0x86, 0x25, 0xc9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xa9, 0x2d, 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x81, 0x2e, 0x4b, 0x25, 0x89, 0x25, 0x89, 0x1d, 0x69, 0x1d, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0xc9, 0x25, 0xa9, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x25, 0x89, 0x2e, 0x4b, 0x08, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// The parameters are  RST pin, BUS number, CS pin, DC pin, FREQ (0 means default), CLK pin, MOSI pin
DisplaySSD1331_96x64x16_SPI display(4,{-1, 17, 16, 0,18,23});
NanoEngine8<DisplaySSD1331_96x64x16_SPI> engine1(display);
NanoEngine8<DisplaySSD1331_96x64x16_SPI> engine2(display);

#define SPRITE1_NUM_MAX 2
#define SPRITE2_NUM_MAX 3

#define SPRITE1_FONT_HEIGHT 8
#define SPRITE2_FONT_HEIGHT 16

#define SPRITE2_WIDTH_MAX (64-8)

NanoPoint sprites1[LCD_SPRITE_NUM_MAX];
NanoPoint sprites2[LCD_SPRITE_NUM_MAX];
S_LCD_CTRL_DATA lcdCtrlData[LCD_DISPLAY_MODE_MAX];

NanoPoint *getSpritesPtr(LCD_DISPLAY_MODE mode)
{
    NanoPoint *ptr;

    if( mode == LCD_DISPLAY_MODE2 )
    {
        ptr = (NanoPoint *)&sprites2;
    }
    else
    {
        ptr = (NanoPoint *)&sprites1;
    }

    return ptr;
}

void lcdCommonSetup(void)
{
    display.begin();
    display.fill( 0x00 );
    display.clear();
}

void lcdSetup(LCD_DISPLAY_MODE mode)
{
    S_LCD_CTRL_DATA *lcdCtrlDataPtr = &lcdCtrlData[mode%LCD_DISPLAY_MODE_MAX];

    switch( mode )
    {
    case LCD_DISPLAY_MODE2:
        lcdCtrlDataPtr->fontHeight = SPRITE2_FONT_HEIGHT;
        lcdCtrlDataPtr->spriteNum = SPRITE2_NUM_MAX;
        lcdCtrlDataPtr->posYmin = 0;
        lcdCtrlDataPtr->posYmax = lcdCtrlDataPtr->fontHeight*lcdCtrlDataPtr->spriteNum;

        for (int j=0; j<lcdCtrlDataPtr->spriteNum; j++)
        {
            sprites2[j].x = 0;
            sprites2[j].y = (lcdCtrlDataPtr->fontHeight*j);
        }
        engine2.begin();
        engine2.refresh();

        engine2.drawCallback( []()->bool {
            engine2.getCanvas().clear();
            engine2.getCanvas().setColor( RGB_COLOR8(255,255,255) );
            engine2.getCanvas().setFixedFont(ssd1306xled_font8x16);
            engine2.getCanvas().printFixedPgm( sprites2[0].x, sprites2[0].y, lcdCtrlData[LCD_DISPLAY_MODE2].displayDataArray[0], STYLE_NORMAL );
            engine2.getCanvas().printFixedPgm( sprites2[1].x, sprites2[1].y, lcdCtrlData[LCD_DISPLAY_MODE2].displayDataArray[1], STYLE_NORMAL );
            engine2.getCanvas().printFixedPgm( sprites2[2].x, sprites2[2].y, lcdCtrlData[LCD_DISPLAY_MODE2].displayDataArray[2], STYLE_NORMAL );
            return true;
        } );
        break;
    case LCD_DISPLAY_MODE1:
    default:
        lcdCtrlDataPtr->fontHeight = SPRITE1_FONT_HEIGHT;
        lcdCtrlDataPtr->spriteNum = SPRITE1_NUM_MAX;
        lcdCtrlDataPtr->posYmin = SPRITE2_FONT_HEIGHT*SPRITE2_NUM_MAX;
        lcdCtrlDataPtr->posYmax = display.height();

        for (int j=0; j<lcdCtrlDataPtr->spriteNum; j++)
        {
            sprites1[j].x = 0;
            sprites1[j].y = (SPRITE2_FONT_HEIGHT*SPRITE2_NUM_MAX) + (lcdCtrlDataPtr->fontHeight*j);
        }
        engine1.begin();
        engine1.refresh();

        engine1.drawCallback( []()->bool {
            engine1.getCanvas().clear();
            engine1.getCanvas().setColor( RGB_COLOR8(255, 32, 32) );
            engine1.getCanvas().setFixedFont(ssd1306xled_font6x8);
            engine1.getCanvas().printFixedPgm( sprites1[0].x, sprites1[0].y, lcdCtrlData[LCD_DISPLAY_MODE1].displayDataArray[0], STYLE_NORMAL );
            engine1.getCanvas().printFixedPgm( sprites1[1].x, sprites1[1].y, lcdCtrlData[LCD_DISPLAY_MODE1].displayDataArray[1], STYLE_NORMAL );
            return true;
        } );
        break;
    }
}

void lcdProc()
{
    for( int i=0; i<LCD_DISPLAY_MODE_MAX; i++ )
    {
        S_LCD_CTRL_DATA *lcdCtrlDataPtr = &lcdCtrlData[i];
        NanoPoint *spritesPtr = getSpritesPtr((LCD_DISPLAY_MODE)i);

        if( lcdCtrlDataPtr->bufferExist )
        {
            strncpy(lcdCtrlDataPtr->displayDataArray[lcdCtrlDataPtr->writeIndex], lcdCtrlDataPtr->displayDataArrayBuffer, BUFFER_SIZE);
            lcdCtrlDataPtr->writeIndex = (lcdCtrlDataPtr->writeIndex + 1) % lcdCtrlDataPtr->spriteNum;

            for (int j=0; j<lcdCtrlDataPtr->spriteNum; j++ )
            {
                spritesPtr->y-=lcdCtrlDataPtr->fontHeight;
                if (spritesPtr->y < lcdCtrlDataPtr->posYmin)
                {
                    spritesPtr->y = lcdCtrlDataPtr->posYmax - lcdCtrlDataPtr->fontHeight;
                }
                if( i==LCD_DISPLAY_MODE2 )
                {
                    engine2.refresh( spritesPtr->x, spritesPtr->y, SPRITE2_WIDTH_MAX, spritesPtr->y + lcdCtrlDataPtr->fontHeight - 1 );
                }
                else
                {
                    engine1.refresh( spritesPtr->x, spritesPtr->y, spritesPtr->x + display.width()-1, spritesPtr->y + lcdCtrlDataPtr->fontHeight - 1 );
                }
            }
#if 0
            if( i==LCD_DISPLAY_MODE2 )
            {
                engine2.refresh( spritesPtr->x, lcdCtrlDataPtr->posYmin, SPRITE2_WIDTH_MAX, lcdCtrlDataPtr->posYmax-1 );
            }
            else
            {
                engine1.refresh( spritesPtr->x, lcdCtrlDataPtr->posYmin, spritesPtr->x + display.width()-1, lcdCtrlDataPtr->posYmax-1 );
            }
#endif

            if( i==LCD_DISPLAY_MODE2 )
            {
                engine2.display();
            }
            else
            {
                engine1.display();
            }

            lcdCtrlDataPtr->bufferExist = false;
        }
        else
        {
            // do nothing
        }
    }
}

bool PrintLCD(LCD_DISPLAY_MODE mode,char *msg) {
    S_LCD_CTRL_DATA *lcdCtrlDataPtr = &lcdCtrlData[mode%LCD_DISPLAY_MODE_MAX];
    NanoPoint *spritesPtr = getSpritesPtr(mode);

    if( lcdCtrlDataPtr->spriteCounter < lcdCtrlDataPtr->spriteNum )
    {
        lcdCtrlDataPtr->spriteCounter++;
        strncpy(lcdCtrlDataPtr->displayDataArray[lcdCtrlDataPtr->spriteCounter], msg, BUFFER_SIZE);

        if( mode==LCD_DISPLAY_MODE2 )
        {
            for (int j=0; j<lcdCtrlDataPtr->spriteNum; j++ )
            {
                engine2.refresh( spritesPtr->x, spritesPtr->y, SPRITE2_WIDTH_MAX, spritesPtr->y + lcdCtrlDataPtr->fontHeight - 1 );
            }
            engine2.display();
        }
        else
        {
            for (int j=0; j<lcdCtrlDataPtr->spriteNum; j++ )
            {
                engine1.refresh( spritesPtr->x, spritesPtr->y, spritesPtr->x + display.width()-1, spritesPtr->y + lcdCtrlDataPtr->fontHeight - 1 );
            }
            engine1.display();
        }
    }
    else
    {
        if( lcdCtrlDataPtr->bufferExist )
        {
            // do nothing
        }
        else
        {
            strncpy(lcdCtrlDataPtr->displayDataArrayBuffer, msg, BUFFER_SIZE);
            lcdCtrlDataPtr->bufferExist = true;
        }
    }
    return true;
}

bool SetStringToLCD(LCD_DISPLAY_MODE mode,LCD_SPRITE_NUM num,char *msg) {
    S_LCD_CTRL_DATA *lcdCtrlDataPtr = &lcdCtrlData[mode%LCD_DISPLAY_MODE_MAX];
    NanoPoint *spritesPtr = getSpritesPtr(mode);

    if( num < lcdCtrlDataPtr->spriteNum )
    {
        strncpy(lcdCtrlDataPtr->displayDataArray[num], msg, BUFFER_SIZE);
        if( mode==LCD_DISPLAY_MODE2 )
        {
            engine2.refresh( (spritesPtr+num)->x, (spritesPtr+num)->y, SPRITE2_WIDTH_MAX, (spritesPtr+num)->y + lcdCtrlDataPtr->fontHeight - 1 );
            engine2.display();
        }
        else
        {
            engine1.refresh( (spritesPtr+num)->x, (spritesPtr+num)->y, (spritesPtr+num)->x + display.width()-1, (spritesPtr+num)->y + lcdCtrlDataPtr->fontHeight - 1 );
            engine1.display();
        }
    }
    else
    {
        // do nothing
    }

    return true;
}

bool SetGraphicToLCD(bool turnOn) {

    if( turnOn )
    {
        display.drawBitmap16(64, 24, 32, 24, image_data_32x24_16bit);
    }
    else
    {
        display.setColor(RGB_COLOR8(0,0,0));
        display.fillRect(64,24,96,64);
    }

    return true;
}

bool SetHeartToLCD(bool turnOn, int heartNum, bool blinkOn) {
    static bool toggleFlag;

    if( blinkOn )
    {
        heartNum++;
    }
    else
    {
        // do nothing
    }
    heartNum = heartNum%32;

    if( turnOn )
    {
        for( int i=0; i<heartNum; i++ )
        {
            if( !blinkOn || (i < heartNum-1 || toggleFlag) )
            {
                display.drawBitmap8(64+(i%4)*8, (i/4)*8, 8, 8, heartImage8);
            }
            else
            {
                display.drawBitmap8(64+(i%4)*8, (i/4)*8, 8, 8, blackImage8);
            }
        }
    }
    else
    {
        for( int i=0; i<12; i++ )
        {
            display.drawBitmap8(64+(i%4)*8, (i/4)*8, 8, 8, blackImage8);
        }
    }
    toggleFlag ^= 1;

    return true;
}

void ClearLCD(void) {
    display.fill( 0x00 );
    display.clear();
}
